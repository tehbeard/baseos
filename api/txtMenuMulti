TxtMenu = {}
TxtMenu.__index = TxtMenu

function create()
	local menu = {}
	setmetatable(menu, TxtMenu)
	menu.entries = {}
	menu.selected = 1
	menu.page = 1
	menu.perPage = 10
	menu.title = ""
	menu.running = false
	return menu;
end



function TxtMenu:addMenuItem(name,status,callback,d)
	local _d = d
	if _d == nil then _d = {} end
	table.insert(self.entries,{
		name=name,
		status=status,
		onclick=callback,
		data=_d
		})
end

function TxtMenu:setTitle(t)
	self.title = t
end

function TxtMenu:setEntries(e)
	self.entries = e
end

function TxtMenu:setPage(p)
	self.page = p
end

function TxtMenu:prevPage()
	self.selected = 1
	self.page = math.max(1, self.page - 1)
end

function TxtMenu:nextPage()
	self.selected = 1
	self.page = math.min(math.ceil(#self.entries / self.perPage),self.page + 1)
end

function TxtMenu:prevSel()
	self.selected = math.max(1, self.selected - 1)
end

function TxtMenu:nextSel()
	actualIdx = self:getSelectedIdx() + 1
    if(actualIdx <= #self.entries) then
	    self.selected = math.min(self.perPage, self.selected + 1)
	end
end

function TxtMenu:getSelectedIdx()
	return (self.perPage * (self.page-1))+self.selected
end


function TxtMenu:keyListen()
	_,param = os.pullEvent("key")
	if param == 200 then
		self:prevSel()
	elseif param == 208 then
		self:nextSel()
	end

	if param == 203 then
		self:prevPage()
	elseif param == 205 then
		self:nextPage()
	end

	if param == 57 or param == 28 then
		e = self.entries[self:getSelectedIdx()]
		e.onclick(e)
		sleep(0.5)
	end

end

function TxtMenu:scrollListen()
	_,d = os.pullEvent("mouse_scroll")
	if d == -1 then
		self:prevSel()
	else
		self:nextSel()
	end
end

function TxtMenu:clickListen()
	_,button,x,y = os.pullEvent("mouse_click")
	if button == 1 then
		w,h = term.getSize()
		rightSide = x > (w/2)
		if y > 1 and y < h then
			idx = y - 1
			if self.selected == idx and rightSide then
			    e = self.entries[self:getSelectedIdx()]
		        e.onclick(e)
		        sleep(0.5)
		    else
		    	self.selected = idx
		    end
		end
		if y == h then
			if rightSide then self:nextPage() else self:prevPage() end
		end
	end
end

function TxtMenu:mon_rez()
	os.pullEvent("monitor_resize")
	term.clear()
	term.setCursorPos(1,1)
	self.selected = 1
	self.page = 1
end

function TxtMenu:repaint()
	-- Get height
	local w,h = term.getSize()
	self.perPage = h-2
	term.setCursorPos(1,1)
	term.clearLine()
	term.write(" -= " .. self.title .. " =- Page: " .. tostring(self.page) .. " of " .. tostring(math.ceil(#self.entries/self.perPage)))

	for i=1,self.perPage,1 do
		term.setCursorPos(1,1+i)
		term.clearLine()
		local entry = self.entries[((self.page-1)*self.perPage) + i]
		if entry ~= nil then
		    -- Generate left hand side, number and string
  		    local line = string.format("%02d",((self.page-1)*self.perPage) + i)
  		    if self.selected == i then
    		  	line = "[" .. line .. "] "
    		  	if term.isColor() then term.setBackgroundColor(colors.green) end
	        else
			    line = " " .. line .. "  "
			    if term.isColor() then term.setBackgroundColor(colors.black) end
		    end
		    line = line .. entry.name
		    
		    term.write(line)
		    -- Now do right hand side
		    if entry.status ~= nil then
			    if type(entry.status) == "string" then
    				statLine = "[" .. entry.status .. "]"
	    		elseif type(entry.status) == "function" then 
		    		statLine = "[" .. entry.status(entry) .. "]"
			    end
			    term.setCursorPos(w - #statLine+1,1+i)
			    term.write(statLine)
		    end
		    if term.isColor() then term.setBackgroundColor(colors.black) end
		end
	end
	term.setCursorPos(1,h)
	term.write("[PREV]")
	term.setCursorPos(w-5,h)
	term.write("[NEXT]")
end
--[[

]]
function TxtMenu:mainLoop(update)
	self.running = true
	while self.running do
		self:repaint()
        parallel.waitForAny(
        	function() self:scrollListen() end,
        	function() self:keyListen() end,
        	function() self:clickListen() end,
        	function() self:mon_rez() end
        )
    end
end

function TxtMenu:stopMainLoop()
	self.running = false
end