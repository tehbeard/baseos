os.loadAPI("api/extcord")
os.loadAPI("api/locate")

m = extcord.new(locate.byTypeMulti("cofh_thermalexpansion_energycell"))

basepower = 2700
bundleSide = "bottom";
powerProfile = "default"


powerDB = {}
if fs.exists("engine.cfg") then
    fh = fs.open("engine.cfg","r")
    powerDB = textutils.unserialize(fh.readAll())
    fh.close()
else
  print("Config not found")
  exit()
end

print(textutils.serialize(powerDB))
-- Generate efficiency
powerDB["cost"] = textutils.unserialize(textutils.serialize(powerDB["default"]));
powerDB["noise"] = textutils.unserialize(textutils.serialize(powerDB["default"]));

-- TODO Resort these two tables based on criteria

-- Install default level zero power levels
for k,v in pairs(powerDB) do
    v[0] = {power=0,colors={},c=0}
end

-- Cache combined color codes
for _,p in pairs(powerDB) do
    for _,v in pairs(p) do
        for _,col in pairs(v["colors"]) do
          if v["c"] == nil then v["c"] = 0 end
          v["c"] = v["c"] + colors[col]
        end
    end
end

function getProfile()
  return powerDB[powerProfile]
end

function setLevel(lvl)
  print(lvl)
  rs.setBundledOutput(bundleSide, lvl)
end

oldvalue = m.getEnergyStored("west")
max = m.getMaxEnergyStored("west")
setLevel(0)
powerlevel = 0

function max_power()
  local l = getProfile()
  return #l
end

function inc_power()
  powerlevel = math.min(max_power(),powerlevel+1)
end

function dec_power()
  powerlevel = math.max(0,powerlevel-1)
end

function set_power_level()
  setLevel(curProfile[powerlevel]["c"])
end

while true do
  
  cur = m.getEnergyStored("west")
  gain = (cur - oldvalue) /20
  oldvalue = cur
  curProfile = getProfile()
  
  generated = basepower+curProfile[powerlevel].power
  usage = generated - gain
  perc = cur/max
  term.clear()
  term.setCursorPos(1,1)
  print(perc*100 .."% charged")
  print(gain .. " RF/t gain")
  print(usage .. " RF/t usage")
  print(generated .. " RF/t generated")
  print("Profile " .. powerProfile)
  print("Powerlevel " .. powerlevel)

  if perc < 0.985 then
    if powerlevel > 0 then
      if gain > (curProfile[powerlevel]["power"] - curProfile[powerlevel-1]["power"]) then
       dec_power()
      end
    end
    if gain < 0 then
      inc_power()
    end
    
  end
  if perc > 0.99 then
    if gain > 0 and powerlevel > 0 then
      powerlevel = powerlevel - 1
    end
    
  end
  if perc > 0.995 then
    powerlevel = 0
  end
  if perc < 0.8 then
    powerlevel = max_power()
  end
  set_power_level()
  sleep(1)
end